buildscript {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-releases" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "net.corda.plugins:cordformation:$cordaGradlePluginsVersion"
        classpath "net.corda.plugins:quasar-utils:$cordaGradlePluginsVersion"
        classpath "net.corda.plugins:cordapp:$cordaGradlePluginsVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.13.0"
}

// You can define this property in ~/.gradle/gradle.properties on your dev box.
if (! project.hasProperty('cordaArtifactoryUsername') || !ext.cordaArtifactoryUsername?.trim()) {
    ext.cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME')
            ?: System.getProperty('corda.artifactory.username')
}

// You can define this property in ~/.gradle/gradle.properties on your dev box.
if (! project.hasProperty('cordaArtifactoryPassword') || !ext.cordaArtifactoryPassword?.trim()) {
    ext.cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            ?: System.getProperty('corda.artifactory.password')
}

// Tell the user if we can't proceed.
if (!ext.cordaArtifactoryUsername?.trim() || !ext.cordaArtifactoryPassword?.trim()) {
    throw new IllegalArgumentException("ERROR: Either 'cordaArtifactoryUsername' or 'cordaArtifactoryPassword' is null!")
}

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'idea'

    version projectVersion
    group "com.r3.dr.test"

    test {
        // this is needed since gradle 5 as it allocates 512Mb RAM to workers by default
        maxHeapSize = "4g"

        // Configure a number of maximum parallel forks for mockNetwork / driver tests so nothing explodes
        maxParallelForks = 3
    }

    // Add support for Cornelius configurations.
    configurations {
        corneliusTestApi
        corneliusTestImplementation.extendsFrom implementation

        corneliusCorDapps {
            transitive false
        }
    }

    // Add corneliusTest source set module.
    sourceSets {
        corneliusTest {
            kotlin {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file("src/corneliusTest/kotlin")
            }
        }
    }

    idea {
        module {
            downloadJavadoc = true // defaults to false
            downloadSources = true

            // Mark Cornelius sources as test code in IntelliJ.
            testSourceDirs += project.sourceSets.corneliusTest.kotlin.srcDirs
            testSourceDirs += project.sourceSets.corneliusTest.resources.srcDirs
        }
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "$artifactoryContextUrl/corda" }
        maven { url "$artifactoryContextUrl/corda-releases" }
        maven { url "$artifactoryContextUrl/corda-solutions-releases" }
        maven { url "$artifactoryContextUrl/corda-dev" }
        maven { url "$artifactoryContextUrl/corda-releases" }
        maven { url "$artifactoryContextUrl/corda-lib-dev" }
        maven { url "$artifactoryContextUrl/corda-lib" }
        maven {
            url "$artifactoryContextUrl/r3-corda-releases"
            credentials {
                username = cordaArtifactoryUsername
                password = cordaArtifactoryPassword
            }
        }

        // Required to resolve dependencies for corda-node-driver 4.1+
        maven { url "https://repo.gradle.org/gradle/libs-releases-local" }
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-reflect"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

        corneliusTestImplementation "org.jetbrains.kotlin:kotlin-reflect"
        corneliusTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        corneliusTestImplementation "org.jetbrains.kotlin:kotlin-test"

        corneliusTestImplementation "com.r3:cornelius:$corneliusVersion"
        corneliusTestImplementation "junit:junit:$junitVersion"
        corneliusTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
        testImplementation "junit:junit:$junitVersion"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    }

    // Add a task for running Cornelius tests.
    task corneliusTest(type: Test) {
        // Should only run one parallel fork so nodes aren't reused.
        maxParallelForks = 1

        // this is needed since gradle 5 as it allocates 512Mb RAM to workers by default
        maxHeapSize = "4g"

        group = "verification"

        testClassesDirs = sourceSets.corneliusTest.output.classesDirs
        classpath = sourceSets.corneliusTest.runtimeClasspath

        // We need to copy Cordapp JARs so Cornelius can find them.
        dependsOn(["copyCorneliusCorDapps"])

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }

        // Cornelius tests are never "up to date" (run them every time).
        outputs.upToDateWhen {
            false
        }

        environment("CORDA_ARTIFACTORY_USERNAME", cordaArtifactoryUsername)
        environment("CORDA_ARTIFACTORY_PASSWORD", cordaArtifactoryPassword)

        mustRunAfter(test)
    }

    // Allow cornelius tests to be skipped. This is used by the build server.
    if (! project.hasProperty('skipCorneliusTests')) {
        check.dependsOn corneliusTest
    }

    // The directory where Cornelius will look for cordapps.
    def corneliusCorDappDir = "build/cordapps"

    // Clean Cornelius' dependent cordapps between builds.
    task deleteCorneliusCorDapps(type: Delete) {
        group = "cornelius"
        delete corneliusCorDappDir
    }

    // Cornelius JAR copier.
    task copyCorneliusCorDapps(type: Copy, dependsOn: ["deleteCorneliusCorDapps"]) {
        group = "cornelius"
        from configurations.corneliusCorDapps
        from jar.outputs
        into corneliusCorDappDir
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }
}

idea {
    module {
        downloadJavadoc = true // defaults to false
        downloadSources = true
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

wrapper {
    gradleVersion = "6.1.1"
    distributionType = Wrapper.DistributionType.ALL
}
